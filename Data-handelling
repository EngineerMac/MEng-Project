{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM41xnJ5AzScyJHaDVUyAAs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EngineerMac/MEng-Project/blob/main/Data-handelling\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "id": "LLVxlpa_7TLc"
      },
      "outputs": [],
      "source": [
        "import csv"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n"
      ],
      "metadata": {
        "id": "qgNeZlAW8KyJ"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/Room-AC_3D_Mesh.csv')"
      ],
      "metadata": {
        "id": "6lRhzPbR8bVY"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B5am_9oKMlLJ",
        "outputId": "ac2acc1a-94aa-40d7-f782-059eeeaad2ba"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   node     x    y     z   vx   vy   vz\n",
            "0     1  3.11  3.0 -6.00  0.0  0.0  0.0\n",
            "1     2  3.11  3.0 -5.97  0.0  0.0  0.0\n",
            "2     3  3.15  3.0 -5.95  0.0  0.0  0.0\n",
            "3     4  3.20  3.0 -5.97  0.0  0.0  0.0\n",
            "4     5  3.20  3.0 -6.00  0.0  0.0  0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "wUGXOT3AP0Y9"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the boundaries\n",
        "x_min, x_max = df['x'].min(), df['x'].max()\n",
        "y_min, y_max = df['y'].min(), df['y'].max()\n",
        "z_min, z_max = df['z'].min(), df['z'].max()\n"
      ],
      "metadata": {
        "id": "CQboKrB1P18E"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#define size of each cube\n",
        "num_cubes = 100\n",
        "x_step = (x_max - x_min) / num_cubes\n",
        "y_step = (y_max - y_min) / num_cubes\n",
        "z_step = (z_max - z_min) / num_cubes"
      ],
      "metadata": {
        "id": "91XYvvF8STC2"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Initialize dictionaries to store summed velocities and counts for each cube\n",
        "cube_summed_velocities = {i: [0, 0, 0] for i in range(num_cubes)}\n",
        "cube_node_counts = {i: 0 for i in range(num_cubes)}\n"
      ],
      "metadata": {
        "id": "guUa8Jc8SbfR"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for index, row in df.iterrows():\n",
        "  x, y, z, vx, vy, vz = row['x'], row['y'], row['z'], row['vx'], row['vy'], row['vz']\n",
        "  cube_x = int((x - x_min) / x_step)\n",
        "  cube_y = int((y - y_min) / y_step)\n",
        "  cube_z = int((z - z_min) / z_step)\n",
        "  if 0 <= cube_x < num_cubes and 0 <= cube_y < num_cubes and 0 <= cube_z < num_cubes:\n",
        "    cube_index = cube_x + cube_y * num_cubes + cube_z * num_cubes * num_cubes\n",
        "    print(f\"x: {x}, y: {y}, z: {z}, cube_x: {cube_x}, cube_y: {cube_y}, cube_z: {cube_z}\")\n",
        "\n",
        "    cube_summed_velocities[cube_index][0] += vx\n",
        "    cube_summed_velocities[cube_index][1] += vy\n",
        "    cube_summed_velocities[cube_index][2] += vz\n",
        "    cube_node_counts[cube_index] += 1\n",
        "\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 262
        },
        "id": "NGEYw13ESjkc",
        "outputId": "26c8809e-9869-4134-c6af-67215f47becf"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x: 3.15, y: 2.95, z: -6.0, cube_x: 98, cube_y: 98, cube_z: 0\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-74-c1a249604ab6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"x: {x}, y: {y}, z: {z}, cube_x: {cube_x}, cube_y: {cube_y}, cube_z: {cube_z}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0mcube_summed_velocities\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcube_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mvx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0mcube_summed_velocities\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcube_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mvy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0mcube_summed_velocities\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcube_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mvz\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 9898"
          ]
        }
      ]
    }
  ]
}